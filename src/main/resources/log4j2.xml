<?xml version="1.0" encoding="UTF-8"?>
<!--根节点Configuration-->
<!--1.有两个属性:status和monitorinterval,-->
<!--    1. status用来指定log4j2自身内部的打印日志的级别.可以不设置, 当设置成trace时，log4j2内部详细输出-->
<!--    2. monitorinterval用于指定log4j2自动重新配置的监测间隔时间，单位是s,最小是5s.-->
<!--2.有两个子节点:Appenders和Loggers(表明可以定义多个Appender和Logger).-->
<!--    1. **Appenders**节点，常见的有三种子节点:Console、RollingFile、File.-->
<!--        1. **Console**节点用来定义输出到控制台的Appender.-->
<!--            name:指定Appender的名字.-->
<!--            target:SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT.-->
<!--            PatternLayout:输出格式，不设置默认为:%m%n.-->
<!--        2. **File**节点用来定义输出到指定位置的文件的Appender.-->
<!--            name:指定Appender的名字.-->
<!--            fileName:指定输出日志的目的文件带全路径的文件名.-->
<!--            PatternLayout:输出格式，不设置默认为:%m%n.-->
<!--            append:当为true时，会在之前的日志里面续加内容，而不清空-->
<!--        3. **RollingFile**节点用来定义超过指定大小自动删除旧的创建新的的Appender.-->
<!--            name:指定Appender的名字.-->
<!--            fileName:指定输出日志的目的文件带全路径的文件名.-->
<!--            filePattern:指定新建日志文件的名称格式.-->
<!--            PatternLayout:输出格式，不设置默认为:%m%n.-->
<!--            Policies:指定滚动日志的策略，就是什么时候进行新建日志文件输出日志.-->
<!--            TimeBasedTriggeringPolicy:
                    Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。-->
<!--            modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am.-->
<!--            SizeBasedTriggeringPolicy:
                    Policies子节点，基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小.-->
<!--            DefaultRolloverStrategy:用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)。-->
<!--    2. **Loggers**节点，常见的有两种:Root和Logger.-->
<!--        1. **Root**节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出-->
<!--            level:日志输出级别，共有8个级别，见下面注-->
<!--            AppenderRef：Root的子节点，用来指定该日志输出到哪个Appender.-->
<!--        2. **Logger**节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
<!--            level:日志输出级别，共有8个级别，见下面注-->
<!--            name:用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点.-->
<!--            AppenderRef：Logger的子节点，用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root.如果指定了，-->
<!--            那么会在指定的这个Appender和Root的Appender中都会输出，此时我们可以设置Logger的additivity="false"-->
<!--            只在自定义的Appender中进行输出。-->

<!--注:关于日志level.共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.-->
<!--1.All:最低等级的，用于打开所有日志记录.-->
<!--2.Trace:是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出.-->
<!--3.Debug:指出细粒度信息事件对调试应用程序是非常有帮助的.-->
<!--4.Info:消息在粗粒度级别上突出强调应用程序的运行过程.-->
<!--5.Warn:输出警告及warn以下级别的日志.-->
<!--6.Error:输出错误信息日志.-->
<!--7.Fatal:输出每个严重的错误事件将会导致应用程序的退出的日志.-->
<!--8.OFF:最高等级的，用于关闭所有日志记录.-->
<!--程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。-->
<configuration status="WARN" monitorInterval="30">
    <properties>
        <property name="PROJECT_NAME">EasyBlog</property>
        <property name="LOG_PATH">D:/logs/${PROJECT_NAME}</property>
<!--        %d{HH:mm:ss.SSS} 表示输出到毫秒的时间-->
<!--        %t 输出当前线程名称-->
<!--        %-5level 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0-->
<!--        %logger 输出logger名称，因为Root Logger没有名称，所以没有输出-->
<!--        %m 日志文本-->
<!--        %n 换行-->
<!--        %F 输出所在的类文件名，如Log4j2Test.java-->
<!--        %L 输出行号-->
<!--        %M 输出所在方法名-->
<!--        %l 输出语句所在的行数, 包括类名、方法名、文件名、行数-->
        <property name="OUTPUT_PATTERN">
            %d{yyyy-MM-dd HH:mm:ss.SSS} [%-5p] %t %C->%l : %m %n
<!--            %d{yyyy-MM-dd HH:mm:ss.SSS} -%5p ${PID:-} [%15.15t] %-30.30C{1.} : %m%n%xwEx-->
        </property>
        <property name="FILE_PATTERN">
            ${LOG_PATH}/${PROJECT_NAME}/$${date:yyyy-MM}/all-%d{yyyy-MM-dd}-%i.log
        </property>
    </properties>
    <Appenders>
        <!--*********************控制台日志***********************-->
        <Console name="consoleAppender" target="SYSTEM_OUT">
            <!--设置日志格式及颜色-->
            <PatternLayout
                    pattern="%style{%d{ISO8601}}{bright,green} %highlight{%-5level} [%style{%t}{bright,blue}] %style{%C{}}{bright,yellow}: %msg%n%style{%throwable}{red}"
                    disableAnsi="false" noConsoleNoAnsi="false"/>
        </Console>
        <!--*********************文件日志***********************-->
        <!--all级别日志-->
        <RollingFile name="allFileAppender"
                     fileName="${LOG_PATH}/all.log"
                     filePattern="${FILE_PATTERN}">
            <!--设置日志格式-->
            <PatternLayout>
                <pattern>${OUTPUT_PATTERN}</pattern>
            </PatternLayout>
            <Policies>
                <!-- 设置日志文件切分参数 -->
                <!--<OnStartupTriggeringPolicy/>-->
                <!--设置日志基础文件大小，超过该大小就触发日志文件滚动更新-->
                <SizeBasedTriggeringPolicy size="10 MB"/>
                <!--设置日志文件滚动更新的时间，依赖于文件命名filePattern的设置-->
                <TimeBasedTriggeringPolicy/>
            </Policies>
            <!--设置日志的文件个数上限，不设置默认为7个，超过大小后会被覆盖；依赖于filePattern中的%i-->
            <DefaultRolloverStrategy max="2"/>
        </RollingFile>

        <!--debug级别日志-->
        <RollingFile name="debugFileAppender"
                     fileName="${LOG_PATH}/debug.log"
                     filePattern="${FILE_PATTERN}">
            <Filters>
                <!--过滤掉info及更高级别日志-->
                <ThresholdFilter level="info" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <!--设置日志格式-->
            <PatternLayout>
                <pattern>${OUTPUT_PATTERN}</pattern>
            </PatternLayout>
            <Policies>
                <!-- 设置日志文件切分参数 -->
                <!--<OnStartupTriggeringPolicy/>-->
                <!--设置日志基础文件大小，超过该大小就触发日志文件滚动更新-->
                <SizeBasedTriggeringPolicy size="5 MB"/>
                <!--设置日志文件滚动更新的时间，依赖于文件命名filePattern的设置-->
                <TimeBasedTriggeringPolicy/>
            </Policies>
            <!--设置日志的文件个数上限，不设置默认为7个，超过大小后会被覆盖；依赖于filePattern中的%i-->
            <DefaultRolloverStrategy max="5"/>
        </RollingFile>

        <!--info级别日志-->
        <RollingFile name="infoFileAppender"
                     fileName="${LOG_PATH}/info.log"
                     filePattern="${FILE_PATTERN}">
            <Filters>
                <!--过滤掉warn及更高级别日志-->
                <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <!--设置日志格式-->
            <PatternLayout>
                <pattern>${OUTPUT_PATTERN}</pattern>
            </PatternLayout>
            <Policies>
            <!-- 设置日志文件切分参数 -->
            <!--<OnStartupTriggeringPolicy/>-->
            <!--设置日志基础文件大小，超过该大小就触发日志文件滚动更新-->
            <SizeBasedTriggeringPolicy size="5 MB"/>
            <!--设置日志文件滚动更新的时间，依赖于文件命名filePattern的设置-->
            <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
             </Policies>
            <!--设置日志的文件个数上限，不设置默认为7个，超过大小后会被覆盖；依赖于filePattern中的%i-->
            <!--<DefaultRolloverStrategy max="100"/>-->
        </RollingFile>

        <!--warn级别日志-->
        <RollingFile name="warnFileAppender"
                     fileName="${LOG_PATH}/warn.log"
                     filePattern="${FILE_PATTERN}">
            <Filters>
                <!--过滤掉error及更高级别日志-->
                <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <!--设置日志格式-->
            <PatternLayout>
                <pattern>${OUTPUT_PATTERN}</pattern>
            </PatternLayout>
            <Policies>
                <!-- 设置日志文件切分参数 -->
                <!--<OnStartupTriggeringPolicy/>-->
                <!--设置日志基础文件大小，超过该大小就触发日志文件滚动更新-->
                <SizeBasedTriggeringPolicy size="5 MB"/>
                <!--设置日志文件滚动更新的时间，依赖于文件命名filePattern的设置-->
                <TimeBasedTriggeringPolicy/>
            </Policies>
            <!--设置日志的文件个数上限，不设置默认为7个，超过大小后会被覆盖；依赖于filePattern中的%i-->
<!--            <DefaultRolloverStrategy max="100"/>-->
        </RollingFile>

        <!--error及更高级别日志-->
        <RollingFile name="errorFileAppender"
                     fileName="${LOG_PATH}/error.log"
                     filePattern="${FILE_PATTERN}">
            <!--设置日志格式-->
            <PatternLayout>
                <pattern>${OUTPUT_PATTERN}</pattern>
            </PatternLayout>
            <Policies>
                <!-- 设置日志文件切分参数 -->
                <!--<OnStartupTriggeringPolicy/>-->
                <!--设置日志基础文件大小，超过该大小就触发日志文件滚动更新-->
                <SizeBasedTriggeringPolicy size="5 MB"/>
                <!--设置日志文件滚动更新的时间，依赖于文件命名filePattern的设置-->
                <TimeBasedTriggeringPolicy/>
            </Policies>
            <!--设置日志的文件个数上限，不设置默认为7个，超过大小后会被覆盖；依赖于filePattern中的%i-->
<!--            <DefaultRolloverStrategy max="100"/>-->
        </RollingFile>

        <!--json格式error级别日志-->
<!--        <RollingFile name="errorJsonAppender"-->
<!--                     fileName="${LOG_PATH}/error-json.log"-->
<!--                     filePattern="${FILE_PATTERN}">-->
<!--            <JSONLayout compact="true" eventEol="true" locationInfo="true"/>-->
<!--            <Policies>-->
<!--                <SizeBasedTriggeringPolicy size="5 MB"/>-->
<!--                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>-->
<!--            </Policies>-->
<!--        </RollingFile>-->
    </Appenders>

    <Loggers>
        <!--spring日志-->
        <Logger name="org.springframework" level="debug" additivity="false"/>
        <Logger name="org.apache" level="debug" additivity="false"/>
        <!--druid日志-->
        <Logger name="com.alibaba.druid" level="info" additivity="false"/>
<!--        mybatis-plus日志-->
        <Logger name="com.baomidou.mybatisplus" level="info" additivity="false"/>
<!--        忽略swagger的日志-->
        <Logger name="springfox.documentation" level="error" additivity="false"/>

        <Logger name="velore.aspect" level="info" additivity="false"/>
        <!-- 根日志设置 -->
        <Root level="debug">
            <AppenderRef ref="allFileAppender" level="all"/>
            <AppenderRef ref="consoleAppender" level="info"/>
            <AppenderRef ref="debugFileAppender" level="debug"/>
            <AppenderRef ref="infoFileAppender" level="info"/>
            <AppenderRef ref="warnFileAppender" level="warn"/>
            <AppenderRef ref="errorFileAppender" level="error"/>
            <!--            <AppenderRef ref="errorJsonAppender" level="error"/>-->
        </Root>
        <!-- mybatis日志 -->
<!--        <Logger name="org.mybatis" level="warn" additivity="false"/>-->
    </Loggers>

</configuration>